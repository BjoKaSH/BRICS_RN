/*!

@page introduction Introduction to the BRICS Robust Navigation Library BRICS_RN.

Robust navigation is the ability of a mobile robot to perform autonomous navigation while 
avoiding dangerous situations such as collisions with obstacles. It is a cross-sectional 
domain which includes path planning, motion control and sensor data processing.

The goal of the BRICS_RN library is, to unify several existing software libraries, that 
provide algorithms for (robust) navigation, into one coherent software framework.  The 
purpose is, to allow an application developer, to easily choose from a set of existing 
algorithms, and to easily exchange those algorithm at a later stage in the application 
development process, without breaking any dependencies or application internal interfaces.

The following discussion is almost entirely taken from section 3 of the @ref bib_bricsd33 "BRICS deliverable D3.3" 
with some additional material from @ref bib_brugali2012 "[Brugali2012]", sections 3.1 and 4.1.

@section taxonomy Navigation Algorithms

Mobile robot navigation algorithms can be roughly classified as one- and multi-step methods. 
One-step methods directly convert the sensor data to motion commands. The majority of 
one- step algorithms are either based on classical planning or on potential fields approaches 
@ref bib_siciliano2008 "[Siciliano2008]". Today, they are rarely used due to their inability 
to cope with dynamic 
environments and vehicle constraints. Multi-step methods (e.g. Dynamic Window Approach 
@ref bib_fox1997 "[Fox1997]", Vector Field Histogram @ref bib_ulrich1998 "[Ulrich1998]", 
Nearness Diagram @ref bib_minguez2004 "[Minguez2004]") overcome these 
limitations by creating a local map of the environment around the robot and performing 
local planning by computing possible motion directions (Nearness Diagram) and velocities 
(VHF) taking into account distance to the goal or to a precomputed path.

A complete navigation system consists usually of many more-or-less independent sub 
components, some examples, taken from @ref bib_bricsd33 "[BRICS deliverable D3.3]", are 
listed below:

@li Motion planning (aka BaseGlobalPlanner, PathPlanner) is the process of computing a 
collision-free global path in a static environment between a given start position and a 
given goal position. The path is typically represented as a sequence of intermediate 
waypoints.
@li Trajectory generation (aka ParameterizedTrajectoryGenerator, DWAPlanner) is the 
process of refining a path in order to introduce velocity information. A trajectory 
defines the planned positions of the robot over the time and is typically represented 
as a sequence of positions with an associated velocity.
@li Obstacle detection and representation (aka CostMap2D, OgMap) is the process of 
using sensor information (e.g. from laser scanners) in order to detect the positions 
of obstacles around the robot. This information is then used for creating and updating 
a map of the environment.
@li Obstacle avoidance (aka LocalBaseNavigation, LocalNav, CAbstractHolonomicReactiveMethod) 
is the process of adapting the precomputed trajectory while the robot is moving in order to 
avoid unexpected obstacles that occlude the path. Position and velocity control (aka 
LocalBaseNavigation, LocalNav, MotionController) is the process of generating velocity 
commands to the robot in order to move it along the computed trajectory. This functionality 
has a strong dependency with the kinematics model, which is often implicit in the library 
implementations.
@li Localization (aka FaithLocaliser, amcl): is the process of estimating the robot 
position with respect to a global reference frame. In the simplest case this functionality 
is implemented by using only the robot odometry but other sensors can be used to improve 
the odometric estimation. For example it is possible to use a camera for locating visual 
markers in the environment whose position is known in the global reference frame, and use 
this information for computing the robot position.

@section intro_design BRICS_RN Design Overview

In many navigation systems, these components are rather tightly coupled. For example, the 
very popular ROS navigation stack exports a single ROS node called "move_base" as its 
public interface, which then creates all the other components. The @c move_base node and 
the other nodes communicate by standard ROS methods, including ROS-Services, ROS topics 
or direct calls. The generall architecture of ROS navigation stack is shown below (taken 
from @ref bib_bricsd33 "[BRICS_D3.3]").

@image html brics-rn-fig2b.png "Simplified ROS navigation stack architecture."

In the BRICS_RN library, these sub components are grouped into four functional gropus 
and organized into a pipeline structure (image taken from @ref bib_bricsd33 "[BRICS_D3.3]"):

@image html brics-rn-fig3.png "BRICS_RN generall architecture."

The following functional groups are used:
@li Trajectory Planner implements the motion planning and trajectory generation functionalities. 
It gets a goal position, the current robot position and sensor observations as an input. 
Desired velocity profile and mobile-base kinematic and dynamic properties are configuration 
parameters. Trajectory Planner produces a trajectory that is a vector of poses with twist.
@li trajectory Adapter interpolates the precomputed trajectory and produces an obstacle-free 
trajectory toward the next waypoint taking into account the actual sensor information 
produced by the laser scanner. Mobile-base kinematic and dynamic properties are configuration 
parameters.
@li Trajectory Follower receives as input the adapted trajectory and the robot's estimated pose 
and produces as output a twist for following the input trajectory.
@li Optional component is coordinator, which implements the coordination logic among 
components. It monitors events generated by components that could represent abnormal 
situations (e.g. the Trajectory Adapter cannot generate a trajectory to avoid an obstacle) 
and generates events that triggers state changes in other components (e.g. the Trajectory 
Planner should plan a new trajectory).

In BRICS_RN key functionalities are mapped to finer grained components. Each component has 
only one thread of control. This allows to replace individual functionalities easier and 
to select the most appropriate frequency for each functionality. Coordination mechanisms 
have been made independent from the components implementations by introducing a Coordinator 
component. Robot kinematics and dynamics are taken into account during trajectory planning 
and adaptation.  The following diagram shows the BRICS_RN components in greater detail, 
including their connection to relevant other parts of a robot system.

@image html brics-rn-fig4.png "BRICS_RN components and interfaces towards other services."

Continuous lines depict the default connections between input and output ports while 
dashed lines represent the optional connections that may be created to configure a 
specific application. Continuous boxes represent mandatory components, while dashed 
boxes represent optional components. Boxes inside components indicate their properties. 

More specifically:
@li Trajectory Planner implements the motion planning and trajectory generation functionalities. 
It gets a goal position and the current robot position as input and produces a trajectory 
that is a vector of poses with twist.
@li Trajectory Adapter interpolates the precomputed trajectory and produces an obstacle-free 
trajectory toward the next waypoint taking into account the sensor information produced 
by the laser scanner.
@li Trajectory Follower receives the adapted trajectory and the robot estimated pose 
and produces as output a twist for following the input trajectory.
@li Robot Driver drives the physical robot. It receives twist commands and produces the 
robot odometry. 
@li Laser Scanner Driver reads the raw data from the device and produces as output the 
laser scans expressed as a vector of distances and angles.
@li Pose Tracker keeps track of the current pose and twist of the robot. It fuses odometry 
estimates with position estimates computed by other components. 
@li Marker Locator is an optional component, which is in charge of localizing visual 
markers placed in the environment and computing their positions with respect to a global 
reference frame. It receives as input an image and the odometry of the robot and produces 
as output the absolute marker position. 
@li RGB Camera Driver is an optional component, which reads data from the RGB camera and 
produces as output an RGB image. 
@li Coordinator implements the coordination logic among components. It monitors events 
generated by components that could represent abnormal situations (e.g. the Trajectory 
Adapter cannot generate a trajectory to avoid an obstacle) and generates events that 
triggers state changes in other components (e.g. the Trajectory Planner should plan a 
new trajectory).

There are some important differences between the proposed BRICS_RN solution and the ROS 
navigation stack. First of all the navigation functionalities are mapped to finer grained 
components. Each component has only one thread of control. This allows to replace individual 
functionalities easier and to select the most appropriate frequency for each functionality. 

Accordingly, the trajectory follower and the trajectory adapter functionalities are 
implemented in two different components, in TrajectoryAdapterNode.cpp and TrajectoryFollowerNode.cpp . This separation reflects the different operating 
frequencies of the two components: the Trajectory Follower runs at a higher frequency, as 
required by the closed loop position and velocity control algorithm. On the contrary the 
Trajectory Adapter component computes a new output only when receives a new laser scan or 
a new trajectory.

Unlike in ROS, the coordination mechanisms have been made independent from the components 
implementations by introducing a Coordinator component.

*/
